import LeanCourse.Project.WedgeSmash_Spaces
import LeanCourse.Project.Suspension


open BigOperators Function Set Filter Topology TopologicalSpace CategoryTheory

noncomputable section

/- This file shows that smashing a pointed space with a sphere - ‚ãÄ ùïä¬π is (TODO: naturally) isomorphic to taking its suspension.
  This would ideally allow to derive the suspension-loop space adjunction from the general adjunction in WedgeSmash_Spaces.

  Strategy:
  - Show that ùïä¬π is (pointed) homeomorphic to the unit interval I quotiented out by its endpoints
  - Show that X ‚ãÄ I/~ is (pointed) homeomorphic to the based suspension Œ£‚ÇÄ X (ONE PROOF STILL MISSING)
-/


--define the spheres S‚Åø

variable (n:‚Ñï)
notation "ùïä" n => Metric.sphere (0:EuclideanSpace ‚Ñù (Fin (n+1) )) 1
noncomputable instance: TopologicalSpace (EuclideanSpace ‚Ñù (Fin (n+1) )) := by exact UniformSpace.toTopologicalSpace
instance: TopologicalSpace (ùïä n) := instTopologicalSpaceSubtype


instance: Inhabited (ùïä n) where
  default := ‚ü®EuclideanSpace.single (0: Fin 1) (1:‚Ñù) , by simp‚ü© --for some reason, writing Fin 1 works for all n, but n+1 fails



--Goal: Show that S¬π‚âÉ‚Çú I/‚àº
notation "circle" => ùïä 1


@[simp] theorem fin_simplify (t: Fin (1+1)) : t = 0 ‚à® t = 1 := by{
  fin_cases t
  simp
  simp
}


def wrap : I ‚Üí circle := fun t ‚Ü¶ ‚ü® fun i ‚Ü¶ i * Real.sin (2*Real.pi*t) + (1-i) * Real.cos (2 * Real.pi * t), by {simp[EuclideanSpace.norm_eq, Finset.sum_range_succ, Finset.sum_fin_eq_sum_range]} ‚ü©


lemma Icc_distance' (a b : I) :  b.val - a.val ‚â§ 1 := by {
  have := b.2
  simp at this
  have that := a.2
  simp at that
  simp
  calc b.val ‚â§ 1 := this.2
  _ ‚â§ 1 + 0 := by {ring; simp}
  _ ‚â§ 1 + a.val := by {simp[that.1]}
}


lemma Icc_distance (a b : I) : (b.val - a.val ‚â§ 1 ) ‚àß (b.val - a.val ‚â• -1) := by {
  constructor
  ¬∑ exact Icc_distance' a b
  ¬∑ have := Icc_distance' b a
    simp
    exact tsub_le_iff_left.mp this
}

lemma Icc_distance_one' (a b : I) (h: b.val - a.val = 1) : b=1 := by{
  have := b.2
  have that := a.2
  simp at this
  simp at that
  apply ge_antisymm
  ¬∑ calc 1 = b.val -a.val := h.symm
    _ ‚â§ b := by simp[that.1]
  ¬∑ exact this.2
}

lemma Icc_distance_one (a b : I) (h: b.val - a.val = 1) : b=1 ‚àß a = 0 := by{
  constructor
  ¬∑ exact Icc_distance_one' a b h
  ¬∑ have := Icc_distance_one' a b h
    rw[this] at h
    norm_num at h
    assumption
}

-- How is this not in mathlib? Was I just bad at searching?
lemma Real.sin_cos_eq_iff {t s : ‚Ñù} (hsin: Real.sin t = Real.sin s) (hcos: Real.cos t = Real.cos s) : ‚àÉ k: ‚Ñ§, s = 2*k*Real.pi + t := by {
  obtain ‚ü®k, hk‚ü© :=  Real.cos_eq_cos_iff.mp hcos
  obtain hc1|hc2 := hk
  ¬∑ use k
  ¬∑ have h1 : sin s = - sin s := by {
    calc
    sin s = sin (2*k*Real.pi - t) := congrArg Real.sin hc2
    _ = - sin t := by {rw[‚ÜêReal.sin_neg t, Real.sin_eq_sin_iff]; use -k; left; push_cast; ring}
    _ = - sin s := by rw[hsin]
  }
    have h2s : sin s = 0 := by {simp at h1; assumption}
    have h2t : sin t = 0 := by {rw[hsin]; assumption}
    obtain ‚ü®i,hi‚ü© := Real.sin_eq_zero_iff.mp h2s
    obtain ‚ü®j,hj‚ü© := Real.sin_eq_zero_iff.mp h2t
    rw[‚Üêhi, ‚Üêhj] at hc2
    have hc2' : j * Real.pi = 2*k*Real.pi - i*Real.pi := by simp[hc2]
    use i-k
    rw[‚Üê hi, ‚Üêhj, hc2']
    have : 2 * ‚Üë(i-k) * Real.pi = 2*i*Real.pi - 2*k*Real.pi := by {push_cast; ring}
    rw[this]
    ring
}



lemma wrap_eq_iff_mp (a b : I) (h: wrap a = wrap b) : ((a=0 ‚à® a=1) ‚àß (b=0 ‚à® b=1)) ‚à® a=b := by{
  have : (wrap a).val 1 = (wrap b).val 1 := by exact congrFun (congrArg Subtype.val h) 1
  have h1 : Real.sin (2*Real.pi * a) = Real.sin (2*Real.pi * b) := by{
    simp[wrap] at this
    assumption
  }

  have : (wrap a).val 0 = (wrap b).val 0 := by exact congrFun (congrArg Subtype.val h) 0
  have h2 : Real.cos (2*Real.pi * a) = Real.cos (2*Real.pi * b) := by{
    simp[wrap] at this
    assumption
  }

  obtain ‚ü®k, hk‚ü© := Real.sin_cos_eq_iff h1 h2
  rw[mul_assoc 2 (k:‚Ñù), mul_comm (k:‚Ñù), ‚Üêmul_assoc, ‚Üêmul_add (2*Real.pi)] at hk
  simp [Real.pi_ne_zero, mul_right_inj' ] at hk
  have hk' := eq_sub_of_add_eq (id hk.symm)
  have hk1 : k ‚â§ 1 ‚àß k ‚â• -1 := by {
    constructor
    ¬∑ apply (@Int.cast_le ‚Ñù _ _ k 1).mp
      rw[hk']
      have : ((1:‚Ñ§ ) : ‚Ñù ) = 1 := by norm_num
      rw[this]
      exact (Icc_distance a b).1
    ¬∑ apply (@Int.cast_le ‚Ñù _ _ (-1) k).mp
      have : ((-1:‚Ñ§ ) : ‚Ñù ) = -1 := by norm_num
      rw[hk', this]
      exact (Icc_distance a b).2
  }

  have hk2 : k=0 ‚à® k=1 ‚à® k =-1 := by{
    obtain ‚ü®hk1a, hk1b‚ü© := hk1
    interval_cases k <;> tauto
  }

  obtain hd1|hd2|hd3 := hk2
  ¬∑ right
    rw[hd1] at hk
    simp at hk
    exact SetCoe.ext (id hk.symm)
  ¬∑ have hc1'': b.val -a.val = 1 := by simp[hk, hd2]
    have := Icc_distance_one a b hc1''
    tauto
  ¬∑ have hc1'' : a.val - b.val = 1 := by simp [hk, hd3]
    have := Icc_distance_one b a hc1''
    tauto
}


lemma wrap_eq_iff (a b : I): wrap a = wrap b ‚Üî ((a = 0 ‚à® a = 1) ‚àß (b = 0 ‚à® b = 1)) ‚à® a = b := by{
  constructor
  ¬∑ exact fun a_1 ‚Ü¶ wrap_eq_iff_mp a b a_1
  ¬∑ intro h
    obtain hc1|hc2 := h
    ¬∑ have: wrap 0 = wrap 1 := by simp[wrap]
      obtain ‚ü®hx, hy‚ü© := hc1
      obtain hd1|hd2 := hx
      ¬∑ obtain he1|he2 := hy
        ¬∑ rw[hd1, he1]
        ¬∑ rw[hd1, he2, this]
      ¬∑ obtain he1|he2 := hy
        ¬∑ rw[hd2, he1, this]
        ¬∑ rw[hd2, he2]
    ¬∑ rw[hc2]
}

lemma continuous_wrap: Continuous wrap := by {
  simp[wrap]
  refine Continuous.subtype_mk ?h fun x ‚Ü¶ wrap.proof_2 x
  rw [continuous_pi_iff]
  intro i
  continuity
}


def I_quotient: Setoid (I) := quotient_setoid ({x: I | x = 0 ‚à® x = 1})

def J := Quotient I_quotient
instance: TopologicalSpace J := instTopologicalSpaceQuotient
instance: Inhabited J where
  default:= Quotient.mk I_quotient 0

lemma I_quotient_default (t: I) : Quotient.mk I_quotient t = (default:J) ‚Üî (t=0 ‚à® t=1) := by{
  let _:= I_quotient
  simp[default]
  have : t ‚âà 0 ‚Üî Setoid.r t 0 := Iff.rfl
  rw[this]
  simp[quotient_setoid_equiv_iff]
  tauto
}

lemma I_quotient_eq (s t : I) : Quotient.mk I_quotient s = Quotient.mk I_quotient t ‚Üî ((s = 0 ‚à® s = 1) ‚àß (t = 0 ‚à® t = 1)) ‚à® s = t := by{
  let _:= I_quotient
  rw[Quotient.eq]
  have : ((s = 0 ‚à® s = 1) ‚àß (t = 0 ‚à® t = 1)) ‚Üî s ‚àà ({x: I | x = 0 ‚à® x = 1}) ‚àß t ‚àà ({x: I | x = 0 ‚à® x = 1}) := by simp
  rw[this]
  apply quotient_setoid_equiv
  rfl
}


def wrap_quot: J ‚Üí circle := by{
  apply Quotient.lift wrap
  intro x y hxy
  rw[wrap_eq_iff]
  have: (I_quotient).r x y := hxy
  simp[quotient_setoid_equiv_iff] at this
  exact this
}


lemma continuous_wrap_quot : Continuous wrap_quot := by {
  apply Continuous.quotient_lift
  exact continuous_wrap
}

lemma injective_wrap_quot : Injective wrap_quot := by{
  let _:= I_quotient
  rw[Injective]
  intro s t hst
  simp[wrap_quot] at hst
  obtain ‚ü®i, hi‚ü© := Quotient.exists_rep s
  obtain ‚ü®j, hj‚ü© := Quotient.exists_rep t
  rw[‚Üê hi, ‚Üê hj, Quotient.lift_mk, Quotient.lift_mk] at hst

  have h' : (I_quotient).r i j := by {
    simp[quotient_setoid_equiv_iff]
    rw[‚Üê wrap_eq_iff]
    assumption
  }
  rw[‚Üê hi, ‚Üê hj]
  rw [Quotient.eq]
  exact h'
}


lemma surjective_wrap_quot : Surjective wrap_quot := by {
  simp[wrap_quot]
  rw [Quot.surjective_lift]
  simp[wrap, Surjective]
  intro x hx
  simp[EuclideanSpace.norm_eq, Finset.sum_fin_eq_sum_range, Finset.sum_range_succ] at hx
  have hx': (x 1)^2 = 1 - (x 0)^2 := by simp [eq_sub_of_add_eq' hx]

  have hx‚ÇÅ: (x 0)^2 ‚â§ 1 := by{
    calc (x 0)^2 ‚â§ (x 0)^2 + (x 1)^2 := by apply le_add_of_nonneg_right; simp[sq_nonneg]
    _ = 1 := by simp[hx]
  }
  simp at hx‚ÇÅ
  have hx‚ÇÇ := neg_le_of_abs_le hx‚ÇÅ
  have hx‚ÇÉ := le_of_abs_le hx‚ÇÅ

  have hœÄ : Real.pi * (Real.pi)‚Åª¬π = 1 := mul_inv_cancel Real.pi_ne_zero

  by_cases h: x 1 ‚â• 0
  ¬∑ use (Real.arccos (x 0)) / (2*Real.pi)
    constructor
    ¬∑ constructor
      ¬∑ rw[div_nonneg_iff]
        left; constructor
        ¬∑ exact Real.arccos_nonneg _
        ¬∑ norm_num; apply le_of_lt Real.pi_pos
      ¬∑ rw[div_le_one (by norm_num; apply Real.pi_pos)]
        calc Real.arccos (x 0) ‚â§ Real.pi := Real.arccos_le_pi (x 0)
        _ = 1 * Real.pi := by rw[one_mul]
        _ ‚â§ 2 * Real.pi := by gcongr; norm_num

    ¬∑ rw[mul_comm]
      ring
      rw[mul_assoc, hœÄ]
      ring
      rw[Real.cos_arccos hx‚ÇÇ hx‚ÇÉ]
      rw[Real.sin_arccos]

      have hx‚ÇÑ: x 1 = Real.sqrt (1 - (x 0)^2) := by {
        have := congrArg Real.sqrt hx'
        simp[h] at this
        simp[this]
      }
      funext i
      fin_cases i
      ¬∑ simp
      ¬∑ simp[hx‚ÇÑ]


  ¬∑ use (2 * Real.pi - Real.arccos (x 0)) /(2*Real.pi)
    simp at h
    constructor
    ¬∑ constructor
      ¬∑ apply div_nonneg
        ¬∑ simp
          calc Real.arccos (x 0) ‚â§ Real.pi := Real.arccos_le_pi (x 0)
          _ = 1 * Real.pi := (one_mul Real.pi).symm
          _ ‚â§ 2 * Real.pi := by gcongr; norm_num
        ¬∑ norm_num; exact le_of_lt Real.pi_pos
      ¬∑ rw[div_le_one (by norm_num; apply Real.pi_pos)]
        simp
        exact Real.arccos_nonneg (x 0)
    ¬∑ ring
      rw[mul_assoc, mul_comm (Real.arccos (x 0)), ‚Üêmul_assoc, pow_two, mul_assoc Real.pi Real.pi, hœÄ]
      simp

      have hx‚ÇÑ: x 1 = - Real.sqrt (1 - (x 0)^2) := by {
        have := congrArg Real.sqrt hx'
        simp[Real.sqrt_sq_eq_abs, abs_of_neg h] at this
        have := congrArg Neg.neg this
        simp at this
        simp[this]
      }

      funext i
      fin_cases i
      ¬∑ ring; simp
        rw[mul_comm, Real.cos_add_two_pi, Real.cos_neg, Real.cos_arccos hx‚ÇÇ hx‚ÇÉ]
      ¬∑ ring; simp[hx‚ÇÑ]
        rw[mul_comm, Real.sin_add_two_pi, Real.sin_neg, Real.sin_arccos]
}



def wrap_quot_equiv: J ‚âÉ circle := by{
  apply Equiv.ofBijective wrap_quot
  rw[Bijective]
  constructor
  ¬∑ exact injective_wrap_quot
  ¬∑ exact surjective_wrap_quot
}

lemma continuous_wrap_quot_equiv : Continuous wrap_quot_equiv := continuous_wrap_quot

instance: CompactSpace J := Quotient.compactSpace

def wrap_quot_homeo: J ‚âÉ‚Çú circle := by{
  apply Continuous.homeoOfEquivCompactToT2 continuous_wrap_quot_equiv
}

instance : T2Space J := Homeomorph.t2Space (wrap_quot_homeo).symm


lemma pointed_wrap_quot : wrap_quot_equiv default = default := by{
  let _:= I_quotient
  simp[wrap_quot_equiv, wrap_quot]
  have : (default : J) = Quotient.mk I_quotient 0 := rfl
  rw[this]
  rw[Quotient.lift_mk]
  simp[wrap, default, EuclideanSpace.single]
  funext t
  simp
  obtain hc1|hc2 := fin_simplify t
  ¬∑ simp[hc1]
  ¬∑ simp[hc2]
}


def wrap_quot_pointed_homeo: J ‚âÉ‚Çú‚ãÜ circle where
  toHomeomorph:= wrap_quot_homeo
  pointed_toFun := pointed_wrap_quot


variable (X:Type) [PointedTopSpace X]
open PointedTopSpace

/-- A pointed homeomorphism between X ‚ãÄ ùïä¬π and X ‚ãÄ [0,1]/‚àº, where the equivalence relation quotients out the extremes. -/
def smash_circle_J_pointed_homeo : X ‚ãÄ (ùïä 1) ‚âÉ‚Çú‚ãÜ X ‚ãÄ J := PointedHomeo.symm (homeo_smash_compare' X (wrap_quot_pointed_homeo))


-- [one proof missing] Now I can show that X ‚ãÄ J ‚âÉ‚Çú‚ãÜ  Œ£‚ÇÄ X

/-- The identity on X times the quotient map from the unit interval to the unit interval mod its extreme points-/
def prod_I_quot: C(X √ó I, X √ó J) := ContinuousMap.prodMap (ContinuousMap.id X) (‚ü®Quotient.mk I_quotient, by apply continuous_quot_mk‚ü©)

/-- The map (x,t) ‚Ü¶ x ‚àß [t], where [t] is the class of t with respect to quotienting out the extemes of the unit interval-/
def prod_to_wedge : C(X √ó I, X ‚ãÄ J) := ContinuousMap.comp (‚ü®Quotient.mk (smash_setoid X J), by apply continuous_quot_mk ‚ü©) (prod_I_quot X)


def sus_to_wedge : Œ£‚ÇÄ X ‚Üí (X ‚ãÄ J) := by{
  let _:= basedsuspension_setoid X
  let _:= smash_setoid X J
  apply Quotient.lift (prod_to_wedge X)
  intro a b hab
  have : (basedsuspension_setoid X).r a b := hab
  simp[quotient_setoid_equiv_iff] at this

  simp[prod_to_wedge, smash_elt_eq_iff, prod_I_quot]
  rw[Quotient.eq]
  have hran : (smash_setoid X J).r (a.1, (Quotient.mk I_quotient a.2)) (b.1, Quotient.mk I_quotient b.2) := by{
    rw[quotient_setoid_equiv_iff]
    have this : range (wedge_embedding X J) = wedge_embedding X J '' univ := image_univ.symm
    have that : (wedge_embedding X J).toContinuousMap.toFun = FunLike.coe (wedge_embedding X J) := rfl
    rw[that, ‚Üê this]
    simp_rw[wedge_embedding_ran_iff]
    rw[‚Üê defaults_eq, ‚Üê defaults_eq, I_quotient_default, I_quotient_default]
    simp[I_quotient_default]
    tauto
  }
  exact hran
}


lemma continuous_sus_to_wedge : Continuous (sus_to_wedge X) := by{
  apply Continuous.quotient_lift
  exact (prod_to_wedge X).continuous_toFun
}

lemma pointed_sus_to_wedge : (sus_to_wedge X) Inhabited.default = Inhabited.default := by{
  let _hset:= basedsuspension_setoid X
  simp[Cylinder] at _hset
  simp[sus_to_wedge]
  have : (Inhabited.default:Œ£‚ÇÄ X) = Quotient.mk _ (Inhabited.default, 0) := rfl
  rw[this, Quotient.lift_mk]
  simp[prod_to_wedge, prod_I_quot]
  rfl
}

lemma injective_sus_to_wedge : Injective (sus_to_wedge X) := by {
  let _hset:= basedsuspension_setoid X
  let _:= smash_setoid X J
  let _hquot:= I_quotient
  simp [Cylinder] at _hset
  let _hset':= basedsuspension_setoid X
  simp[Injective]
  intro a b hab
  simp[sus_to_wedge] at hab
  obtain ‚ü®a', ha'‚ü©:= Quotient.exists_rep a
  obtain ‚ü®b', hb'‚ü©:= Quotient.exists_rep b
  rw[‚Üê ha', ‚Üê hb'] at hab
  simp[prod_to_wedge, prod_I_quot] at hab
  have hab' : (smash_setoid X J).r (a'.1, Quotient.mk I_quotient a'.2) (b'.1, Quotient.mk I_quotient b'.2) := Quotient.eq'.mp hab
  simp at hab'
  rw[‚Üê ha', ‚Üê hb']
  rw[Quotient.eq]
  have : Setoid.r a' b' := by{
    simp
    simp[wedge_embedding_ran''] at hab'
    rw[‚Üê defaults_eq, ‚Üê defaults_eq, I_quotient_default, I_quotient_default] at hab'
    rw[I_quotient_eq] at hab'
    obtain hc1|hc2 := hab'
    ¬∑ left
      tauto
    ¬∑ obtain ‚ü®h1, h2‚ü©:= hc2
      obtain hd1|hd2 := h2
      ¬∑ tauto
      ¬∑ right
        calc
        a' = (a'.1, a'.2) := rfl
        _ = (b'.1, b'.2) := by rw[h1, ‚Üê hd2]
        _ = b' := rfl
  }
  exact this
}

lemma surjective_sus_to_wedge : Surjective (sus_to_wedge X) := by {
  let _hsus : Setoid (X √ó I):= basedsuspension_setoid X
  rw[Surjective]
  intro b
  obtain ‚ü®p, hp‚ü© := Quotient.exists_rep b
  obtain ‚ü®i, hi‚ü© := Quotient.exists_rep p.2
  use Quotient.mk _ (p.1, i)
  simp[sus_to_wedge, prod_to_wedge, prod_I_quot]
  rw[hi, hp]
}

def equiv_sus_to_wedge : Œ£‚ÇÄ X ‚âÉ  (X ‚ãÄ J) := by {
  apply Equiv.ofBijective (sus_to_wedge X)
  constructor
  ¬∑ exact injective_sus_to_wedge X
  ¬∑ exact surjective_sus_to_wedge X
}

/- Irrelevant
lemma isClosed_IJ : IsClosedMap (Quotient.mk I_quotient) := by{
  have _hq :  T2Space (_root_.Quotient I_quotient) := Homeomorph.t2Space (wrap_quot_homeo).symm
  apply Continuous.isClosedMap
  exact continuous_coinduced_rng
}
-/


lemma isOpen_sus_to_wedge : IsOpenMap (sus_to_wedge X) := by {
  let _: Setoid (X √ó I):= basedsuspension_setoid X
  let _:= basedsuspension_setoid X
  rw[IsOpenMap]
  intro U hU
  have hU‚ÇÇ := @quotientMap_quot_mk (Cylinder X) _ (basedsuspension_setoid X).r
  have hU‚ÇÉ := (QuotientMap.isOpen_preimage hU‚ÇÇ).mpr hU
  let U' := Quot.mk Setoid.r ‚Åª¬π' U

  have hU' := (@isOpen_prod_iff X I _ _ U').mp hU‚ÇÉ

  let V':= (prod_I_quot X)'' U'

  let f : X √ó I ‚Üí Œ£‚ÇÄ X := Quotient.mk (basedsuspension_setoid X)
  let g : Œ£‚ÇÄ X ‚Üí X ‚ãÄ J := sus_to_wedge X
  let h : X √ó I ‚Üí X √ó J := prod_I_quot X
  let i : X √ó J ‚Üí X ‚ãÄ J := Quotient.mk (smash_setoid X J)

  have hf : f '' (f ‚Åª¬π' U) = U := by{
    apply Function.Surjective.image_preimage
    exact QuotientMap.surjective hU‚ÇÇ
  }

  have hcomp : g ‚àò f = i ‚àò h := by{
    dsimp
    rw[sus_to_wedge, Quotient.lift_comp_mk]
    rfl
  }

  have hpreim : g '' U = i '' V' := by {
    rw[‚Üêhf, Set.image_image]
    have : (fun x ‚Ü¶ g (f x) ) = g ‚àò f := rfl
    rw[this, hcomp ]
    have : i ‚àò h = (fun x ‚Ü¶ i (h x)) := rfl
    rw[this, ‚ÜêSet.image_image ]
    rfl
  }


  rw[hpreim]
  have hV'‚ÇÇ := @quotientMap_quot_mk _ _ (smash_setoid X J).r
  apply (QuotientMap.isOpen_preimage hV'‚ÇÇ).mp
  sorry
}

  /-
  have hV'‚ÇÉ : ((wedge_embedding X J) '' univ) ‚à© V' = ‚àÖ  ‚à® ((wedge_embedding X J) '' univ ‚äÜ V') := by{
    by_contra hcontr
    push_neg at hcontr
    obtain ‚ü®h1, h2‚ü© := hcontr
    rw[Nonempty] at h1
    rw[Set.inter_nonempty_iff_exists_left] at h1
    obtain ‚ü®v, hv‚ü© := h1
  }


  have hpre':  i ‚Åª¬π' (i '' V') = V' := by {
    sorry
    -- the idea is that V' either contains the whole X ‚ãÅ J or it is disjoint from it
  }
  have : @Quot.mk (X √ó J) (smashsetoid X J).r = i := rfl
  rw[this, hpre']

  -- similar to hpre'
  apply (@isOpen_prod_iff X J _ _ V').mpr
  intro a b hab
  obtain ‚ü®b', hb'‚ü© := Quotient.exists_rep b
  specialize hU' a b'
  sorry

  -- this is a bit of a mess
}

#check Function.Surjective.image_preimage


#check isOpen_prod_iff

-/


def homeo_sus_to_wedge : Œ£‚ÇÄ X ‚âÉ‚Çú (X ‚ãÄ J) := by {
  apply Homeomorph.homeomorphOfContinuousOpen (equiv_sus_to_wedge X)
  ¬∑ exact continuous_sus_to_wedge X
  ¬∑ exact isOpen_sus_to_wedge X
}

def pointed_homeo_sus_to_wedge: Œ£‚ÇÄ X ‚âÉ‚Çú‚ãÜ  (X ‚ãÄ J)  where
  toHomeomorph:= homeo_sus_to_wedge X
  pointed_toFun:= pointed_sus_to_wedge X


--Finally, compose all the pointed homeomorphisms to show that X ‚ãÄ S¬π ‚âÉ‚Çú‚ãÜ  Œ£‚ÇÄ X
def smashcircle_is_suspension : X ‚ãÄ circle ‚âÉ‚Çú‚ãÜ  Œ£‚ÇÄ X := PointedHomeo.trans (homeo_smash_compare' X (wrap_quot_pointed_homeo).symm) (pointed_homeo_sus_to_wedge X).symm

--[Ideally, one should show this isomorphism is natural in X]





-- [TODO] Prove that the free suspension of ùïä‚Åø is homeomorphic to ùïä^{n+1}
/- I had started working on this but I couldn't do much, I had other parts of the project to work on
 and I just ran out of time.
 This is the only code I have and I did not want to delete it and pretend it never existed,
 but it does nothing at this point.
 -/

lemma target_in_sphere (y : ùïä n) (t: I) : @norm (EuclideanSpace ‚Ñù (Fin (n + 1))) SeminormedAddGroup.toNorm (Fin.snoc (fun i ‚Ü¶ Real.sqrt (1 - (‚Üët+1)/2 * (‚Üët+1)/2) * (y.1 i) ) ((‚Üët +1)/2))  = 1 := by{
  simp[Fin.snoc, EuclideanSpace.norm_eq, Finset.sum_fin_eq_sum_range, Finset.sum_range_succ]

  sorry
  -- I remember this working earlier (???)
}

#check Finset.sum_congr

def cyl_to_sphere: (ùïä n) √ó I  ‚Üí (ùïä (n+1)) :=
  fun (‚ü®x, p‚ü©, t) ‚Ü¶ ‚ü®Fin.snoc ( fun i ‚Ü¶ Real.sqrt (1-((‚Üët +1)/2)*((‚Üët +1)/2)) * (x i) ) ((‚Üët +1)/2) ,  by{simp; /-exact target_in_sphere n (‚ü®x, p‚ü©) t}-/ sorry} ‚ü©


def sus_to_sphere: S (ùïä n) ‚Üí ùïä (n+1) := by{
  apply Quotient.lift (cyl_to_sphere n)
  intro a b hab
  ext i
  simp[cyl_to_sphere, Fin.snoc]
  sorry
}


theorem injective_sus_to_sphere : Injective (sus_to_sphere n) := by{
  sorry
}

theorem surjective_sus_to_sphere : Surjective (sus_to_sphere n) := by{
  sorry
}

def sus_to_sphere_equiv : S (ùïä n) ‚âÉ (ùïä (n+1)) := by{
  apply Equiv.ofBijective (sus_to_sphere n)
  rw[Bijective]
  constructor
  ¬∑ exact injective_sus_to_sphere n
  ¬∑ exact surjective_sus_to_sphere n
}

theorem continuous_sus_to_sphere : Continuous (sus_to_sphere_equiv n) := by{
  sorry
}


instance : CompactSpace (Cylinder (ùïä n)) := instCompactSpaceProdInstTopologicalSpaceProd
instance : CompactSpace (S (ùïä n)) := Quotient.compactSpace


def sus_to_sphere_homeo: S (ùïä n)  ‚âÉ‚Çú (ùïä (n+1))  := by{
  apply Continuous.homeoOfEquivCompactToT2 (continuous_sus_to_sphere n)
}

-- add pointed

end
